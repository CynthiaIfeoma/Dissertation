library(readxl)  
library(dplyr)   
library(lubridate)  
library(ggplot2)
library(ggrepel)

# Function for safe data type conversion
safe_convert <- function(x, target_class) {
  tryCatch({
    if (target_class == "POSIXct") {
      as.POSIXct(x, format = "%Y-%m-%d %H:%M:%S")
    } else if (target_class == "Date") {
      as.Date(x)
    } else {
      as(x, target_class)
    }
  }, error = function(e) {
    warning(paste("Could not convert column to", target_class, "- keeping original"))
    x
  })
}

# Function to convert columns safely
convert_columns_safe <- function(df, column_types) {
  for (col in names(column_types)) {
    if (col %in% names(df)) {
      df[[col]] <- safe_convert(df[[col]], column_types[[col]][1])
    }
  }
  return(df)
}

# Load the datasets
data1 <- read_excel("/Users/cynthiaugwu/Downloads/global_terrorism_data.xlsx", col_types = "text")
data2 <- read_excel("/Users/cynthiaugwu/Downloads/gtd_Jan_June.xlsx", col_types = "text")

# Inspect the structure of both datasets
str(data1)
str(data2)

# Get the column types from data1
data1_types <- sapply(data1, class)

# Convert data1 and data2 using the safe conversion method
data1 <- convert_columns_safe(data1, data1_types)
data2 <- convert_columns_safe(data2, data1_types)

# Combine the datasets
combined_data <- rbind(data1, data2)

# Inspect the structure and the first few rows of the combined dataset
str(combined_data)
tail(combined_data)

# Step 2: Prepare the data
data_prepared <- combined_data %>%
  filter(gname == "Boko Haram") %>%  
  mutate(year = as.numeric(iyear)) %>%
  filter(year >= 2008 & year <= 2021) %>%  
  group_by(year) %>%
  summarize(
    attack_frequency = n(),
    total_deaths = sum(as.numeric(nkill), na.rm = TRUE),
    operational_sophistication = n_distinct(attacktype1)
  ) %>%
  mutate(
    lethality_rate = (total_deaths / attack_frequency) * 100
  )

interventions <- data.frame(
  year = c(2009, 2011, 2013, 2013, 2014, 2014, 2015, 2018, 2021),
  event = c("Operation Flush", "Operation Restore Order", "Peaceful Engagement", 
            "Operation BOYONA", "Multinational Joint Task Force (MNJTF)", "NACTEST", 
            "MNJTF Reinforcement", "Super Camp Strategy", "Leadership Decapitation"),
  type = c("Kinetic", "Kinetic", "Non-Kinetic", "Kinetic", "Kinetic", "Non-Kinetic", 
           "Kinetic", "Kinetic", "Kinetic"),
  intensity = rep("High", 9)
)

create_plot <- function(data, y_var, title, y_label) {
  max_y <- max(data[[y_var]], na.rm = TRUE)
  
  # Create a position adjustment for interventions in the same year
  interventions <- interventions %>%
    group_by(year) %>%
    mutate(y_pos = seq(max_y * 1.1, max_y * 1.3, length.out = n()),
           label = paste0(event, " (", substr(type, 1, 1), ")"))
  
  ggplot(data, aes(x = year, y = .data[[y_var]])) +
    geom_line(linewidth = 0.5, color = "darkblue") +
    geom_point(size = 2, color = "darkblue") +
    geom_vline(data = interventions,
               aes(xintercept = year, color = type),
               linetype = "dashed") +
    geom_label_repel(data = interventions,
                     aes(x = year, y = y_pos, label = label, fill = type),
                     color = "white",
                     size = 2,
                     direction = "both",
                     ylim = c(max_y * 1.1, NA),
                     segment.color = "grey50",
                     segment.size = 0.2,
                     segment.alpha = 0.8,
                     box.padding = 0.5,
                     point.padding = 0.1,
                     force = 10,
                     max.overlaps = Inf) +
    scale_color_manual(values = c("Kinetic" = "red", "Non-Kinetic" = "blue")) +
    scale_fill_manual(values = c("Kinetic" = "red", "Non-Kinetic" = "blue")) +
    scale_x_continuous(breaks = seq(2009, 2021, by = 1),
                       limits = c(2009, 2021),
                       expand = c(0, 0)) +
    coord_cartesian(ylim = c(0, max_y * 1.5), clip = "off") +
    labs(title = paste(title, "(Boko Haram)"),
         x = "Year", 
         y = y_label,
         caption = "Red: Kinetic, Blue: Non-kinetic ") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1),
          legend.position = "bottom",
          plot.title = element_text(size = 12, face = "bold"),
          plot.subtitle = element_text(size = 10),
          axis.title = element_text(size = 10),
          plot.caption = element_text(size = 8, hjust = 0),
          plot.margin = margin(t = 80, r = 20, b = 20, l = 20, unit = "pt"))
}

# Create and display plots
plot1 <- create_plot(data_prepared, "attack_frequency", "Intervention on Attack Frequency", "Number of Attacks")
plot2 <- create_plot(data_prepared, "lethality_rate", "Intervention on Lethality Rate", "Deaths per 100 Attacks")
plot3 <- create_plot(data_prepared, "operational_sophistication", "Intervention on Diversity of Tactics", "Number of Distinct Attack Types")

# Print plots
print(plot1)
print(plot2)
print(plot3)


# Step 6: Prepare data for correlation analysis
correlation_data <- data_prepared %>%
  left_join(interventions, by = "year") %>%
  group_by(year) %>%
  summarize(
    attack_frequency = first(attack_frequency),
    lethality_rate = first(lethality_rate),
    operational_sophistication = first(operational_sophistication),
    kinetic_intervention = sum(type == "Kinetic"),
    non_kinetic_intervention = sum(type == "Non-Kinetic"),
    total_interventions = n()
  ) %>%
  mutate(
    intervention_type = case_when(
      kinetic_intervention > 0 & non_kinetic_intervention > 0 ~ "Both",
      kinetic_intervention > 0 ~ "Kinetic",
      non_kinetic_intervention > 0 ~ "Non-Kinetic",
      TRUE ~ "None"
    ),
    intervention_type = factor(intervention_type, levels = c("None", "Non-Kinetic", "Kinetic", "Both"))
  )

# Step 7: Calculate correlation matrix
print("Summary of variables for correlation:")
correlation_matrix <- cor(correlation_data %>%
                            select(attack_frequency, lethality_rate, operational_sophistication, 
                                   kinetic_intervention, non_kinetic_intervention, total_interventions),
                          use = "pairwise.complete.obs")

# Print the correlation matrix
print("Correlation Matrix:")
knitr::kable(correlation_matrix, 
             caption = "Correlation Matrix", 
             digits = 5,
             format = "pipe")
